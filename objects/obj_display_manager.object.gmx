<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display Properties

ideal_width = 0;
ideal_height= 247;
zoom = 1;
max_zoom = 1;
selected_view = display.view;
current_season = season.spring;
draw_gui = false;

// get and enforce aspect ratio
aspect_ratio = display_get_width() / display_get_height();

ideal_width = round(ideal_height * aspect_ratio);

// set max zoom
max_zoom = floor(display_get_width() / ideal_width);    

//pixel perfect scaling
if (display_get_width() mod ideal_width != 0)
{
    var d = round(display_get_width() / ideal_width);
    ideal_width = display_get_width() / d;
}
if (display_get_height() mod ideal_height != 0)
{
    var d = round(display_get_height() / ideal_height);
    ideal_height = display_get_height() / d;
}

// handle odd numbers
if (ideal_width &amp; 1)
    ideal_width++;
if (ideal_height &amp; 1)
    ideal_height++;


    
for (var i=1; i&lt;=room_last; i++)
{
    if (room_exists(i))
    {
        room_set_view(i, 0, false, 0, 0, ideal_width, ideal_height, 0, 0, ideal_width, ideal_height, 0, 0, 0, 0, -1);
        room_set_view(i, 1, true, 0, 0,              ideal_width/2, ideal_height, 0, 0,              ideal_width/2, ideal_height, 0, 0, 0, 0, -1);
        room_set_view(i, 2, true, ideal_width/2, 0,  ideal_width/2, ideal_height, ideal_width/2, 0,  ideal_width/2, ideal_height, 0, 0, 0, 0, -1);
        room_set_view_enabled(i, true);
    }
}

surface_resize(application_surface, ideal_width, ideal_height);
window_set_size(ideal_width, ideal_height);
display_set_gui_size(ideal_width, ideal_height);
alarm[0]=1;

room_goto(room_next(room));
//increase zoom by default
scr_zoom();
scr_set_bkg(current_season);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// center window
window_center();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle display manager inputs
input_display_manager();
 
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw gui
draw_set_font(fnt_basic);
draw_set_color(c_white);

if (draw_gui)
{
    draw_set_valign(fa_left);
    draw_set_halign(fa_top);
    draw_text(5, 5,display_write_specs(selected_view));
    draw_text(5, 20, string(instance_count));
    draw_text(5, 35, script_get_name(obj_player1.current_state));
}

if (global.screenmode == screen.dual)
{
    draw_set_color(c_black);
    draw_line_width(display_get_gui_width()/2, 0, display_get_gui_width()/2, display_get_gui_height(), 8); 
}

if (global.screenmode == screen.quad)
{
    draw_set_color(c_black);
    draw_line_width(display_get_gui_width()/2, 0, display_get_gui_width()/2, display_get_gui_height(), 8); 
}

draw_set_color(c_white);
draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
draw_text(display_get_gui_width()-5, display_get_gui_height()-5, global.season[current_season]);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
