<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// camera stats
view_zoom = 1;
view_max_zoom = 10;
playerID = -1;
sprite[facing.right] = noone;
sprite[facing.up] = noone;
sprite[facing.left] = noone;
sprite[facing.down] = noone;
spritedir = facing.down;
follow_me = true;
target_playerID = 0;
move_speed = 1000;
far_away = global.cell_size * 8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view following

var _target_object = global.player[target_playerID];
var _x_abs_delta = abs(x - _target_object.x);
var _y_abs_delta = abs(y - _target_object.y);
var max_abs_delta = max(_x_abs_delta, _y_abs_delta);

if (max_abs_delta &gt; far_away)
    move_speed_multiplier = max_abs_delta / far_away + 1;
else
    move_speed_multiplier = 1;
    
x = approach(x, _target_object.x, move_speed * move_speed_multiplier);
y = approach(y, _target_object.y, move_speed * move_speed_multiplier);

if (follow_me)
{
    var zoom_speed = 0.1;
    view_zoom += keyboard_check(ord("Q"))*zoom_speed;
    view_zoom -= keyboard_check(ord("E"))*zoom_speed;
    view_zoom = clamp(view_zoom, 1, view_max_zoom);
    
    view_wview = obj_display_manager.ideal_width / view_zoom;
    view_hview = obj_display_manager.ideal_height / view_zoom;
    
    //Center on player
    view_xview=x-view_wview/2;
    view_yview=y-view_hview/2;
    
    //clamp to room
    view_xview=clamp(view_xview,0,room_width-view_wview);
    view_yview=clamp(view_yview,0,room_height-view_hview);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
