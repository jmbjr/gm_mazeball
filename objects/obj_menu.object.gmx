<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set up menu

display_set_gui_size(global.view_width, global.view_height);

// create menu pages
ds_menu_main = create_menu_page(
    array("RESUME",      menu_element_type.script_runner,    resume_game),
    array("SETTINGS",    menu_element_type.page_transfer,    menu_page.settings),
    array("EXIT",        menu_element_type.script_runner,    exit_game)
);

ds_settings = create_menu_page(
    array("AUDIO",       menu_element_type.page_transfer,    menu_page.audio),
    array("DIFFICULTY",  menu_element_type.page_transfer,    menu_page.difficulty),
    array("GRAPHICS",    menu_element_type.page_transfer,    menu_page.graphics),
    array("CONTROLS",    menu_element_type.page_transfer,    menu_page.controls),
    array("BACK",        menu_element_type.page_transfer,    menu_page.main)
);

ds_menu_audio = create_menu_page(
    array("MASTER",      menu_element_type.slider,           change_volume,  0.5,  array(0,1)),
    array("SOUNDS",      menu_element_type.slider,           change_volume,  0.2,  array(0,1)),
    array("MUSIC",       menu_element_type.slider,           change_volume,  1,  array(0,1)),
    array("BACK",        menu_element_type.page_transfer,    menu_page.settings)
);

ds_menu_difficulty = create_menu_page(
    array("ENEMIES",     menu_element_type.shift,            change_difficulty,  0,  array("HARMLESS", "NORMAL", "KILLER")),
    array("ALLIES",      menu_element_type.shift,            change_difficulty,  0,  array("DUMB", "NORMAL", "GENIUS")),
    array("BACK",        menu_element_type.page_transfer,    menu_page.settings),   
);

ds_menu_graphics = create_menu_page(
    array("RESOLUTION",  menu_element_type.shift,            change_difficulty,  0,  array("384 x 216", "768 x 432", "1152 x 648")),
    array("WINDOW MODE", menu_element_type.toggle,           change_difficulty,  0,  array("FULLSCREEN", "WINDOWED")),
    array("BACK",        menu_element_type.page_transfer,    menu_page.settings)
);

ds_menu_controls = create_menu_page(
    array("UP",          menu_element_type.input,            "key_up",       vk_up),
    array("LEFT",        menu_element_type.input,            "key_left",     vk_left),
    array("RIGHT",       menu_element_type.input,            "key_right",    vk_right),
    array("DOWN",        menu_element_type.input,            "key_down",     vk_down),
    array("BACK",        menu_element_type.page_transfer,    menu_page.settings) 
);

page = 0;
menu_pages = array(ds_menu_main, ds_settings, ds_menu_audio, ds_menu_difficulty, ds_menu_graphics, ds_menu_controls);
var i = 0, array_len = array_length_1d(menu_pages);
repeat(array_len)
{
    menu_option[i] = 0;
    i++;
}

inputting = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clean up ds_grids
var i = 0, array_len = array_length_1d(menu_pages);
repeat(array_len)
{
    ds_grid_destroy(menu_pages[i]);
    i++;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// handle inputs
if (!global.pause) exit;

input_up_p      = keyboard_check_pressed(global.key_up);
input_down_p    = keyboard_check_pressed(global.key_down);
input_enter_p   = keyboard_check_pressed(global.key_enter);

var ds_grid = menu_pages[page], ds_height = ds_grid_height(ds_grid);

if (inputting) {

    switch(ds_grid[# 1, menu_option[page]]) {
    // get our element type
    case menu_element_type.shift:
        var hinput = keyboard_check_pressed(global.key_right) - keyboard_check_pressed(global.key_left);
        if (hinput != 0) {
            //audio
            ds_grid[# 3, menu_option[page]] += hinput;
            ds_grid[# 3, menu_option[page]]  = clamp(ds_grid[# 3, menu_option[page]], 0, array_length_1d(ds_grid[# 4, menu_option[page]])-1);
        }
    break;
        
    case menu_element_type.slider:
        var hinput = keyboard_check(global.key_right) - keyboard_check(global.key_left);
        if (hinput != 0) {
            ds_grid[# 3, menu_option[page]] += hinput*0.01;
            ds_grid[# 3, menu_option[page]]  = clamp(ds_grid[# 3, menu_option[page]], 0, 1); // or could pull from ds_grid
        }
    break;
    
    case menu_element_type.toggle:
        var hinput = keyboard_check_pressed(global.key_right) - keyboard_check_pressed(global.key_left);
        if (hinput != 0) {
            //audio
            ds_grid[# 3, menu_option[page]] += hinput;
            ds_grid[# 3, menu_option[page]]  = clamp(ds_grid[# 3, menu_option[page]], 0, 1);
        }
    break;
    
    case menu_element_type.input:
        var kk = keyboard_lastkey;
        if (kk != vk_enter ) { // add more forbidden keys here
            if (kk != ds_grid[# 3, menu_option[page]]) //play audio
            
            ds_grid[# 3, menu_option[page]] = kk;
            variable_global_set(ds_grid[# 2, menu_option[page]], kk);
        }        
    break;
    }
}
else {
    var ochange = input_down_p - input_up_p;
    if (ochange != 0) {
        menu_option[page] += ochange;
        if (menu_option[page] &gt; ds_height - 1) { menu_option[page] = 0; }
        if (menu_option[page] &lt; 0) { menu_option[page] = ds_height - 1; } 
        //audio
    }
}

if (input_enter_p) {
    switch(ds_grid[# 1, menu_option[page]]) {
        // get our element type
        case menu_element_type.script_runner: break;//script_execute(ds_grid[# 2, menu_option[page]]) ;
        case menu_element_type.page_transfer: page = ds_grid[# 2, menu_option[page]]; break;
        case menu_element_type.shift:
        case menu_element_type.slider:
        case menu_element_type.toggle: //if(inputting){ script_execute(ds_grid[# 2, menu_option[page]], ds_grid[# 3, menu_option[page]]);} break;
        case menu_element_type.input:
            inputting = !inputting;
            break;
    
    }
    //audio
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw menu

if (!global.pause) exit;

var gwidth = global.view_width, gheight = global.view_height;
var ds_grid = menu_pages[page], ds_height = ds_grid_height(ds_grid);
var y_buffer = 32, x_buffer = 16;
var start_y = (gheight/2) - ((((ds_height -1)/2) * y_buffer)), start_x = gwidth/2;

//draw pause menu "Back"
var c = c_black, _xo;

draw_rectangle_color(0,0,gwidth, gheight, c,c,c,c, false);

//Draw Elements on Left Side
draw_set_valign(fa_middle);
draw_set_halign(fa_right);

var ltx = start_x - x_buffer, lty;

var yy = 0; repeat(ds_height){
    lty = start_y + (yy * y_buffer);
    c = c_white;
    xo = 0;
    
    if (yy == menu_option[page]) {
        c = c_orange;
        xo = -(x_buffer/2);
    }
    draw_text_color(ltx+xo, lty, ds_grid[# 0, yy], c,c,c,c, 1);       
    yy++;
}

//Draw dividing line
draw_line(start_x, start_y, start_x, lty);

//Draw visual elements on Right Side
draw_set_halign(fa_left);

var rtx = start_x + x_buffer, rty;

yy = 0; repeat(ds_height) {
    rty = start_y + (yy*y_buffer);
    
    switch(ds_grid[# 1, yy]) {
        // get our element type
        case menu_element_type.shift:
            var current_val = ds_grid[# 3, yy];
            var current_array = ds_grid[# 4, yy];
            var left_shift = "&lt;&lt; ";
            var right_shift = " &gt;&gt;";
            var c = c_white; 
            
            if (current_val == 0) left_shift = "";
            if (current_val == array_length_1d(ds_grid[# 4, yy]) -1) right_shift = "";
            
            if (inputting and yy == menu_option[page]) {c = c_yellow;}
            draw_text_color(rtx, rty, left_shift + current_array[current_val] + right_shift, c,c,c,c, 1);
            
        break;   
        
        case menu_element_type.slider:
            var len = 64;
            var current_val = ds_grid[# 3, yy];
            var current_array = ds_grid[# 4, yy];
            var circle_pos = ((current_val - current_array[0]) / (current_array[1] - current_array[0]));
            var c = c_white;
            
            draw_line_width(rtx, rty, rtx + len, rty, 2);
            
            if (inputting and yy == menu_option[page]) {c = c_yellow;}
            draw_circle_color(rtx + (circle_pos * len), rty, 4, c, c, false);
            draw_text_color(rtx + (len * 1.2), rty, string(floor(circle_pos*100)) + "%", c,c,c,c,1);
        break;
        
        case menu_element_type.toggle:
            var current_val = ds_grid[# 3, yy];
            var c1, c2;
            var c = c_white;
            if (inputting and yy == menu_option[page]) {c = c_yellow;}
            
            if (current_val == 0) { c1 = c; c2 = c_dkgray;}
            else                  { c1 = c_dkgray; c2 = c;}
            
            draw_text_color(rtx, rty, "ON", c1, c1, c1, c1, 1);
            draw_text_color(rtx + 32, rty, "OFF", c2, c2, c2, c2, 1);
        break;
            
        case menu_element_type.input:
            var current_val = ds_grid[# 3, yy];
            var string_val;
            var c = c_white;
            
            switch(current_val){
                case vk_up:     string_val = "UP KEY"; break;   
                case vk_left:   string_val = "LEFT KEY"; break; 
                case vk_right:  string_val = "RIGHT KEY"; break; 
                case vk_down:   string_val = "DOWN KEY"; break;    
                default:        string_val = chr(current_val); break;  
            }
            
            if (inputting and yy == menu_option[page]) {c = c_yellow;}
            draw_text_color(rtx, rty, string_val, c,c,c,c, 1);
            
        break;    
    }
    yy++;
}
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
