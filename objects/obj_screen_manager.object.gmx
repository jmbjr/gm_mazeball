<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// properly manage screen modes

var _col1=false;
var _col2=false;
var _row1=false;
var _row2=false;

// figure out how many rows and cols for split screen
// Future opportunity for simplication!  should just check this for split screen

if (global.player[0].visible || global.player[2].visible) //first column visible
    _col1=true;

if (global.player[1].visible || global.player[3].visible) //second column visible
    _col2=true;
   
if (global.player[0].visible || global.player[1].visible) //first row visible
    _row1=true;

if (global.player[2].visible || global.player[3].visible) //second column visible
    _row2=true;
        
if (_col1 &amp;&amp; _col2)
    global.splitcols = 2;
else
    global.splitcols = 1;

if (_row1 &amp;&amp; _row2)
    global.splitrows = 2;
else
    global.splitrows = 1;


if (global.screenmode_changed)
{
    view_visible[view.single] = false;
    view_visible[view.quad1] = false;
    view_visible[view.quad2] = false;
    view_visible[view.quad3] = false;
    view_visible[view.quad4] = false;
    
    switch (global.screenmode)
    {
        case screen.single:
            view_visible[view.single] = true;
            break;
        
        // refactor this so that quad1/2/3/4 are views 0/1/2/3    
        case screen.split:
            if (global.player[0].visible) 
                view_visible[view.quad1] = true;
            if (global.player[1].visible) 
                view_visible[view.quad2] = true;
            if (global.player[2].visible) 
                view_visible[view.quad3] = true;
            if (global.player[3].visible) 
                view_visible[view.quad4] = true;
            break;      
    }
    global.screenmode_changed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw GUI stuff for split screen modes
if (global.pause) exit;

if (global.screenmode == screen.split)
{
    draw_set_color(c_black);
    if (global.splitcols == 2)
        draw_line_width(display_get_gui_width()/2, 0, display_get_gui_width()/2, display_get_gui_height(), 8); 
    if (global.splitrows == 2)
        draw_line_width(0, display_get_gui_height()/2, display_get_gui_width(), display_get_gui_height()/2, 8); 

}

// loop through all players. for active ones, 

var iiplayer = 0;
var _x, _y;
var haste_var = "Haste :";
var points_var = "Score :";
var _xspc = 5;
var _yspc = 10;

for (iiplayer = 0; iiplayer &lt; global.maxplayers; iiplayer++)
{
    if (global.player[iiplayer].visible) // draw HUD
    {
        //this doesn't handle variable split screens yet
        switch (iiplayer) 
        {
            case 0:
                _x = _xspc;
                _y = _yspc;
            break;
            case 1:
                _x = display_get_gui_width()/2 + _xspc;
                _y = _yspc;
            break;
            case 2:
                _x = _xspc;
                _y = display_get_gui_height()/global.splitrows + _yspc;
            break;
            case 3:
                _x = display_get_gui_width()/2 + _xspc;
                _y = display_get_gui_height()/global.splitrows + _yspc;
            break;
        }
    
        draw_set_font(fnt_small);
        draw_set_color(c_white);
        draw_set_halign(fa_left);
        draw_set_valign(fa_middle);  
        draw_text(_x, _y, haste_var);
        
        var _h = global.player[iiplayer].hastecharges;
        var iihaste;
        var c = c_white;
        var _tw = string_width(haste_var);
        var _r = 3;
        var _xoff = _r*2;
        
        if (_h &gt; 0)
        {
            for(iihaste=1; iihaste&lt;=_h; iihaste++)
               draw_circle_color(_x + _tw + (_xoff * iihaste), _y, _r, c, c, false);
        }
        
        //draw points
        _ph = string_height(points_var);
        _pw = string_width(points_var);
        draw_text(_x, _y + _ph, points_var);
        draw_text(_x + _pw, _y + _ph, string(global.player[iiplayer].points));
        
                 
    }
}        
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
